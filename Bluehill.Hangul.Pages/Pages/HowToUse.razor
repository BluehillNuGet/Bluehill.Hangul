@using HighlightBlazor
@page "/howtouse"

<PageTitle>Bluehill.Hangul - How to Use</PageTitle>

<h2>기본 사용법</h2>

<p><code>Bluehill.Hangul</code> 네임스페이스를 가져와 사용할 수 있습니다.</p>

<CodeHighlight>
    using Bluehill.Hangul;
</CodeHighlight>

<p><code>global using</code>을 사용하면 각 파일에 추가할 필요 없이 프로젝트의 모든 파일에서 사용할 수 있습니다.</p>

<CodeHighlight>
    global using Bluehill.Hangul;
</CodeHighlight>

<p>만약 특정 기능만 필요하다면 <code>using static</code>을 사용할 수도 있습니다.</p>

<CodeHighlight>
    using static Bluehill.Hangul.Josa;
</CodeHighlight>

<h2>한글 조사 처리</h2>

<p>을/를, 이/가 등의 한글 조사 처리를 확장 메서드로 간단하게 할 수 있습니다.</p>

<p>다음의 9가지 메서드를 제공합니다.</p>

<ol>
    <li><code>EunNeun</code> (은/는)</li>
    <li><code>IGa</code> (이/가)</li>
    <li><code>I</code> (이)</li>
    <li><code>EulReul</code> (을/를)</li>
    <li><code>GwaWa</code> (과/와)</li>
    <li><code>AYa</code> (아/야)</li>
    <li><code>EuRo</code> (로/으로)</li>
    <li><code>Jongseong</code> (커스텀 메서드)</li>
    <li><code>NoJongseongOrRieul</code> (커스텀 메서드)</li>
</ol>

<h3>기본 메서드</h3>

<CodeHighlight>
    Console.WriteLine("성재".EunNeun() + " 내 친구이다."); // 성재는 내 친구이다.
    Console.WriteLine("아버지".IGa() + " 방에 들어가신다."); // 아버지가 방에 들어가신다.
    Console.WriteLine("사랑".I() + "네집 떡볶이"); // 사랑이네집 떡볶이
</CodeHighlight>

<p><code>defaultJosa</code>와 <code>josaOnly</code> 매개변수를 사용할 수 있습니다. <code>defaultJosa</code>는 마지막 글자가 한글 글자가 아닐 경우 (영문, 숫자, 한자, 한글 자모 등) 붙는 문자열이고 <code>josaOnly</code>를 <code>true</code>로 설정하면 조사만 반환합니다.</p>

<CodeHighlight>
    Console.WriteLine("Bluehill".EunNeun("은") + " 바보다."); // Bluehill은 바보다.
    Console.WriteLine("百聞".I("(이/가)") + " 불여일견"); // 百聞(이/가) 불여일견
    Console.WriteLine("사과".EulReul("을(를)", true) + " 깎는다."); // 를 깎는다.
</CodeHighlight>

<h3>커스텀 메서드</h3>

<p><code>Jongseong</code>과 <code>NoJongseongOrRieul</code>은 커스텀 메서드입니다. 모든 매개변수를 제공해야 하며, <code>null</code> 값은 허용되지 않습니다.</p>

<CodeHighlight>
    Console.WriteLine("당신".Jongseong("은 누굽니까", "은 저희와 함께 하실 수 없습니다.", "는 저희와 함께 하실 수 있습니다.", false)); // 당신은 저희와 함께 하실 수 없습니다.
    Console.WriteLine("무슨 소릴".NoJongseongOrRieul("", "", "를", false) + "하는 거야 지금"); // 무슨 소릴하는 거야 지금
    Console.WriteLine("넌".Jongseong("내꺼야", "내꺼야", "저리가", true)); // 내꺼야
</CodeHighlight>

<h2>문자 처리</h2>
<h3>자모 얻기</h3>

<p>한글 문자에서 초성 / 중성 / 종성 열거형을 얻고, 열거형을 한글 낱자로 변환할 수 있습니다.</p>

<CodeHighlight>
    const char gal = '갈';
    Console.WriteLine(gal.Choseong()); // Giyeok
    Console.WriteLine(gal.Jungseong()); // A
    Console.WriteLine(gal.Jongseong()); // Rieul
    Console.WriteLine(gal.Choseong().ToJamo()); // ㄱ
</CodeHighlight>

<h3>HangulSyllable</h3>

<p>한글 만을 위한 구조체로 <code>HangulSyllable</code> 형식을 제공하고 있습니다.</p>

<CodeHighlight>
    const char ga = '가';
    const char a = 'a';
    HangulSyllable gaChar = new(ga);
    HangulSyllable aChar = new(a); // ArgumentException
</CodeHighlight>

<p><code>HangulSyllable</code> 형식에서 바로 초성, 중성, 종성 열거형을 얻는 것이 가능합니다.</p>

<CodeHighlight>
    const char kim = '김';
    HangulSyllable kimChar = new(kim);
    Console.WriteLine(kimChar.Choseong); // Giyeok
    Console.WriteLine(kimChar.Jungseong); // I
    Console.WriteLine(kimChar.Jongseong); // Mieum
</CodeHighlight>

<p>또한 <code>HangulSyllable</code> 형식은 <code>Deconstruct</code> 메서드를 제공하고 있어, 다음과 같은 구문으로 초성, 중성, 종성을 얻는 것도 가능합니다.</p>

<CodeHighlight>
    var (giyeok, i, mieum) = new HangulSyllable(kim);
</CodeHighlight>

<h3><code>char</code> 확장 메서드</h3>

<p>그 외에도 <code>char</code>의 확장 메서드로 다음 메서드들을 제공하고 있습니다.</p>

<ul>
    <li><code>IsHangul</code></li>
    <li><code>IsHangulSyllable</code></li>
    <li><code>IsHangulJamo</code></li>
    <li><code>IsHangulConsonant</code></li>
    <li><code>IsHangulVowel</code></li>
</ul>

<h2>기타</h2>
<h3>한글 관련 상수</h3>

<p>한글 관련 상수들이 <code>HangulConstants</code> 클래스에 제공되고 있습니다. 조사, 문자, 자모, 한글 채움 문자, 첫가끝 자모 등을 사용할 수 있습니다.</p>
